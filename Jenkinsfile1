pipeline {
    agent {
      label 'ec2'
        }

    environment {
        DOCKER_REGISTRY = "584294315145.dkr.ecr.us-east-1.amazonaws.com"
        SONARQUBE_SERVER = "http://54.152.150.181:9000"
        AWS_REGION = "us-east-1"
        
        AWS_ECR_ACCOUNT_ID = "533267249366"
        AWS_ECR_REGION = "us-east-1"
        AWS_ECR_REPOSITORY = "jenkins-poc"
        DOCKER_IMAGE_NAME = "hello-world-app"
    }
    stages {
        stage('Checkout') {
            steps {
                retry(3) {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/shekharbo/hello-world.git']]])
                }
            }
        }
        
        stage('Unit Test') {
            steps {
                sh 'docker --version'
                sh 'docker pull python:3.9'
                sh 'pip install -r requirements.txt'
                sh 'python3 -m venv ~/myenv'
                sh """
                set +x
                . /home/ubuntu/myenv/bin/activate
                """
                sh """
                /home/ubuntu/.local/bin/pytest /home/ubuntu/workspace/hello_world_demo/tests/test_main.py
               """
            }
        }
        
        stage('Code Coverage') {
            steps {
                sh 'pip install coverage'
                sh """
                /home/ubuntu/.local/bin/coverage run -m pytest /home/ubuntu/workspace/hello_world_demo/tests/test_main.py
                """
                sh '/home/ubuntu/.local/bin/coverage report'
                sh '/home/ubuntu/.local/bin/coverage xml -o coverage.xml'
                cobertura coberturaReportFile: 'coverage.xml'
            }
        }
        
       /* stage('SCA and SonarQube') {
            steps {
                // Configure SonarQube environment
                withSonarQubeEnv('SonarQubeServer') {
                    // Execute SonarScanner command
                    script {
                        def scannerHome = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        if (scannerHome) {
                            sh "/home/ubuntu/hello-world-demo-python/hello-world/sonar-scanner-5.0.1.3006-linux \
                                -Dsonar.projectKey=hello-world \
                                -Dsonar.sources=src \
                                -Dsonar.host.url=http://54.152.150.181:9000 \
                                -Dsonar.login=squ_031f99275d678658a83cb2960ef6cf99b2be9664"
                        } else {
                            error "SonarQube Scanner not configured."
                        }
                    }
                }
            }
        }
        */
        stage('Build and tag image using Docker') {
            steps {
                script {
                    sh 'cd /home/ubuntu/hello-world-demo-python/hello-world'
                    sh 'pwd'
                    sh 'ls -l Dockerfile'
                    sh 'docker build -t hello-world-app .'
                    // Tag Docker image for AWS ECR
                        sh "docker tag hello-world-app ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY}:latest"
                        
                        // Authenticate Docker client to AWS ECR
                        withCredentials([usernamePassword(credentialsId: 'aws-ecr-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            sh "aws ecr get-login-password --region ${AWS_ECR_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com"
                            
                            // Push Docker image to AWS ECR
                            sh "docker push ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY}:latest"
                  }
                }
            }
        }
        
        stage('Image scan using trivy') {
            steps {
                sh 'trivy image 533267249366.dkr.ecr.us-east-1.amazonaws.com/jenkins-poc:latest' // Example command for image vulnerability scanning
            }
        }
        
         stage('Push to AWS ECR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'aws-ecr-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh "aws ecr get-login-password --region ${AWS_ECR_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}"
                        sh "docker tag ${DOCKER_IMAGE_NAME}:latest ${DOCKER_REGISTRY}/${AWS_ECR_REPOSITORY}:latest"
                        //sh "docker push ${DOCKER_REGISTRY}/${AWS_ECR_REPOSITORY}:latest"
                        //sh 'docker push 533267249366.dkr.ecr.us-east-1.amazonaws.com/jenkins-poc:latest'
                          sh "docker push ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY}:latest"

                    }
                }
            }
        }
        
        stage('Deploy application on EC2') {
            steps {
                sshagent(credentials: ['ssh_key']) {
                    sh 'ssh  -o StrictHostKeyChecking=no ubuntu@3.86.18.96 "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 533267249366.dkr.ecr.us-east-1.amazonaws.com"'
                    sh 'ssh -o  StrictHostKeyChecking=no ubuntu@3.86.18.96 "docker pull 533267249366.dkr.ecr.us-east-1.amazonaws.com/jenkins-poc:latest"'
                    sh 'ssh  -o StrictHostKeyChecking=no ubuntu@3.86.18.96 "docker run -d --name jenkins_final -p 8082:8082 533267249366.dkr.ecr.us-east-1.amazonaws.com/jenkins-poc:latest"'
                }
            }
        }
    }
}
